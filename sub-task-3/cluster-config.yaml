# An example of ClusterConfig object using an existing VPC:
--- 
apiVersion: eksctl.io/v1alpha5
kind:   ClusterConfig

metadata:
    name:   aruna004
    region: us-east-1

vpc:
    id: "vpc-08f87273096abc5af"  # (optional, must match VPC ID used for each subnet below)
    cidr:   "10.20.0.0/16"       # (optional, must match CIDR used by the given VPC)
    subnets:
    # must provide 'private' and/or 'public' subnets by availibility zone as shown
        private:
            us-east-1a:
                id: "subnet-00e63b4836e58b4e5"
                cidr:   "10.20.3.0/24" # (optional, must match CIDR used by the given subnet)
            
            us-east-1b:
                id: "subnet-08a77ff4a984f2c10"
                cidr:   "10.20.4.0/24"  # (optional, must match CIDR used by the given subnet)
            
        public:
            us-east-1a:
                id: "subnet-0cd31edbca55709c8"
                cidr:   "10.20.1.0/24" # (optional, must match CIDR used by the given subnet)
            
            us-east-1b:
                id: "subnet-02db27fedefe85d31"
                cidr:   "10.20.2.0/24"  # (optional, must match CIDR used by the given subnet)
            
    clusterEndpoints:
        publicAccess:   true
        privateAccess:  true
        
iam:
    withOIDC:   true
    serviceAccounts:
    - metadata:
        name:   s3-reader
        # if no namespace is set, "default" will be used;
        # the namespace will be created if it doesn't exist already
        namespace:  backend-apps
        labels: {aws-usage: "application"}
      attachPolicyARNs:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
    - metadata:
        name:   aws-load-balancer-controller
        namespace:  kube-system
      wellKnownPolicies:
        awsLoadBalancerController:  true
    - metadata:
        name:   ebs-csi-controller-sa
        namespace:  kube-system
      wellKnownPolicies:
        ebsCSIController:   true
    - metadata:
        name:   efs-csi-controller-sa
        namespace:  kube-system
      wellKnownPolicies:
        efsCSIController:   true
    - metadata:
        name:   external-dns
        namespace:  kube-system
      wellKnownPolicies:
        externalDNS:    true
    - metadata:
        name:   cert-manager
        namespace:  cert-manager
      wellKnownPolicies:
        certManager:    true
    - metadata:
        name:   cluster-autoscaler
        namespace:  kube-system
        labels: {aws-usage: "cluster-ops"}
      wellKnownPolicies:
        autoScaler: true
    - metadata:
        name:   build-service
        namespace:  ci-cd
      wellKnownPolicies:
        imageBuilder:   true
    - metadata:
        name:   cache-access
        namespace:  backend-apps
        labels: {aws-usage: "application"}
      attachPolicyARNs:
        - "arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess"
    - metadata:
        name:   autoscaler-service
        namespace:  kube-system
      attachPolicy: # inline policy can be defined along with `attachPolicyARNs`
        Version:    "2012-10-17"
        Statement:
        - Effect:   Allow
          Action:
            - "autoscaling:DescribeAutoScalingGroups"
            - "autoscaling:DescribeAutoScalingInstances"
            - "autoscaling:DescribeLaunchConfigurations"
            - "autoscaling:DescribeTags"
            - "autoscaling:SetDesiredCapacity"
            - "autoscaling:TerminateInstanceInAutoScalingGroup"
            - "ec2:DescribeLaunchTemplateVersions"
          Resource:   '*'
    - metadata:
        name:   some-app
        namespace:  default
      attachRoleARN:  arn:aws:iam::123:role/already-created-role-for-app
        
nodeGroups:
    - name: ng1-public
      instanceType:   t2.medium
      instanceName:   custom-node-name
      desiredCapacity:    2
      availabilityZones:  ["us-east-1a"]
      tags:
        # EC2 tags required for cluster-autoscaler auto-discovery
        k8s.io/cluster-autoscaler/enabled:  "true"
        k8s.io/cluster-autoscaler/aruna004: "owned"
    - name: ng2-private
      instanceType:   t2.medium
      desiredCapacity:    2
      privateNetworking:  true
      availabilityZones:  ["us-east-1a"]
      tags:
        # EC2 tags required for cluster-autoscaler auto-discovery
        k8s.io/cluster-autoscaler/enabled:  "true"
        k8s.io/cluster-autoscaler/aruna004: "owned"